// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.29.3
// source: protos/prediction.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MatchpointClient is the client API for Matchpoint service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MatchpointClient interface {
	// Un método RPC para obtener la predicción completa de un partido.
	GetMatchPrediction(ctx context.Context, in *MatchPredictionRequest, opts ...grpc.CallOption) (*MatchPredictionResponse, error)
	PredictAllEventMatches(ctx context.Context, in *EventPredictionRequest, opts ...grpc.CallOption) (*EventPredictionResponse, error)
}

type matchpointClient struct {
	cc grpc.ClientConnInterface
}

func NewMatchpointClient(cc grpc.ClientConnInterface) MatchpointClient {
	return &matchpointClient{cc}
}

func (c *matchpointClient) GetMatchPrediction(ctx context.Context, in *MatchPredictionRequest, opts ...grpc.CallOption) (*MatchPredictionResponse, error) {
	out := new(MatchPredictionResponse)
	err := c.cc.Invoke(ctx, "/matchpoint.Matchpoint/GetMatchPrediction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchpointClient) PredictAllEventMatches(ctx context.Context, in *EventPredictionRequest, opts ...grpc.CallOption) (*EventPredictionResponse, error) {
	out := new(EventPredictionResponse)
	err := c.cc.Invoke(ctx, "/matchpoint.Matchpoint/PredictAllEventMatches", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MatchpointServer is the server API for Matchpoint service.
// All implementations must embed UnimplementedMatchpointServer
// for forward compatibility
type MatchpointServer interface {
	// Un método RPC para obtener la predicción completa de un partido.
	GetMatchPrediction(context.Context, *MatchPredictionRequest) (*MatchPredictionResponse, error)
	PredictAllEventMatches(context.Context, *EventPredictionRequest) (*EventPredictionResponse, error)
	mustEmbedUnimplementedMatchpointServer()
}

// UnimplementedMatchpointServer must be embedded to have forward compatible implementations.
type UnimplementedMatchpointServer struct {
}

func (UnimplementedMatchpointServer) GetMatchPrediction(context.Context, *MatchPredictionRequest) (*MatchPredictionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMatchPrediction not implemented")
}
func (UnimplementedMatchpointServer) PredictAllEventMatches(context.Context, *EventPredictionRequest) (*EventPredictionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PredictAllEventMatches not implemented")
}
func (UnimplementedMatchpointServer) mustEmbedUnimplementedMatchpointServer() {}

// UnsafeMatchpointServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MatchpointServer will
// result in compilation errors.
type UnsafeMatchpointServer interface {
	mustEmbedUnimplementedMatchpointServer()
}

func RegisterMatchpointServer(s grpc.ServiceRegistrar, srv MatchpointServer) {
	s.RegisterService(&Matchpoint_ServiceDesc, srv)
}

func _Matchpoint_GetMatchPrediction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MatchPredictionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchpointServer).GetMatchPrediction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/matchpoint.Matchpoint/GetMatchPrediction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchpointServer).GetMatchPrediction(ctx, req.(*MatchPredictionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Matchpoint_PredictAllEventMatches_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventPredictionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchpointServer).PredictAllEventMatches(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/matchpoint.Matchpoint/PredictAllEventMatches",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchpointServer).PredictAllEventMatches(ctx, req.(*EventPredictionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Matchpoint_ServiceDesc is the grpc.ServiceDesc for Matchpoint service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Matchpoint_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "matchpoint.Matchpoint",
	HandlerType: (*MatchpointServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMatchPrediction",
			Handler:    _Matchpoint_GetMatchPrediction_Handler,
		},
		{
			MethodName: "PredictAllEventMatches",
			Handler:    _Matchpoint_PredictAllEventMatches_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/prediction.proto",
}
